{"name":"Sat-js","tagline":"A simple JavaScript library for performing 2D collision detection","body":"SAT.js\r\n======\r\n\r\n - [Classes](#classes)\r\n - [Collision Tests](#tests)\r\n - [Examples](#examples)\r\n \r\nAbout\r\n-----\r\n\r\nSAT.js is a simple JavaScript library for performing collision detection (and projection-based collision response) of simple 2D shapes.  It uses the [Separating Axis Theorem](http://en.wikipedia.org/wiki/Hyperplane_separation_theorem) (hence the name)\r\n\r\nIt supports detecting collisions between:\r\n - Circles (using Vornoi Regions.)\r\n - Convex Polygons (and simple Axis-Aligned Boxes, which are of course, convex polygons.)\r\n\r\nIt's released under the [MIT](http://en.wikipedia.org/wiki/MIT_License) license.\r\n\r\nCurrent version: `0.2`. [Annotated source code](http://jriecken.github.io/sat-js/docs/SAT.html) is available.\r\n\r\nNicely compresses with the [Google Closure Compiler](https://developers.google.com/closure/compiler/) in **Advanced** mode to about 5KB (1.8KB gzipped)\r\n \r\n<a name=\"classes\"></a>\r\nClasses\r\n--------\r\n\r\nSAT.js contains the following JavaScript classes:\r\n\r\n### SAT.Vector (aliased as SAT.V)\r\n\r\nThis is a simple 2D vector/point class.  It is created by calling:\r\n\r\n    // Create the vector (10,10) - If (x,y) not specified, defaults to (0,0).\r\n    var v = new SAT.Vector(10, 10) \r\n\r\nIt has the following properties:\r\n\r\n - `x` - The x-coordinate of the Vector.\r\n - `y` - The y-coordinate of the Vector.\r\n\r\nIt contains the following methods:\r\n\r\n - `copy(other)` - Copy the value of another Vector to this one.\r\n - `perp()` - Change this vector to be perpendicular to what it was before.\r\n - `rotate(angle)` - Rotate this vector counter-clockwise by the specified number of radians.\r\n - `reverse()` - Reverse this Vector.\r\n - `normalize()` - Make the Vector unit-lengthed.\r\n - `add(other)` - Add another Vector to this one.\r\n - `sub(other)` - Subtract another Vector from this one.\r\n - `scale(x,y)` - Scale this Vector in the X and Y directions.\r\n - `project(other)` - Project this Vector onto another one.\r\n - `projectN(other)` - Project this Vector onto a unit Vector.\r\n - `reflect(axis)` - Reflect this Vector on an arbitrary axis Vector.\r\n - `reflectN(axis)` - Reflect this Vector on an arbitrary axis unit Vector.\r\n - `dot(other)` - Get the dot product of this Vector and another.\r\n - `len2()` - Get the length squared of this Vector.\r\n - `len()` - Get the length of this Vector\r\n \r\n### SAT.Circle\r\n\r\nThis is a simple circle with a center position and a radius.  It is created by calling:\r\n\r\n    // Create a circle whose center is (10,10) with radius of 20\r\n    var c = new SAT.Circle(new Sat.Vector(10,10), 20);\r\n    \r\nIt has the following properties:\r\n\r\n - `pos` - A Vector representing the center of the circle.\r\n - `r` - The radius of the circle\r\n\r\n\r\n### SAT.Polygon\r\n\r\nThis is a **convex** polygon, whose points are specified in a counter-clockwise fashion.  It is created by calling:\r\n\r\n    // Create a triangle at (0,0)\r\n    var p = new SAT.Polygon(new SAT.Vector(), [\r\n      new SAT.Vector(),\r\n      new SAT.Vector(100,0),\r\n      new SAT.Vector(50,75)\r\n    ]);\r\n\r\nIt has the following properties:\r\n\r\n - `pos` - The position of the polygon (all points are relative to this).\r\n - `points` - Array of vectors representing the points of the polygon.\r\n - `edges` - Array of Vectors representing the edges of the polygon\r\n - `normals` - Array of Vectors representing the edge normals of the polygon (perpendiculars)\r\n\r\nIt has the following methods:\r\n\r\n - `recalc()` - Call this method to recalculate the edges and normals when any of the points change.\r\n - `rotate(angle)` - Rotate this polygon counter-clockwise (around its local coordinate system) by the specified number of radians.\r\n - `translate(x, y)` - Translate the points of this polygin (relative to the local coordinate system) by the specified amounts. Most useful for changing the \"center\" of the polygon.\r\n \r\n### SAT.Box\r\n\r\nThis is a simple Box with a position, width, and height.  It is created by calling:\r\n\r\n    // Create a box at (10,10) with width 20 and height 40.\r\n    var b = new SAT.Box(new SAT.Vector(10,10), 20, 40);\r\n\r\nIt has the following properties:\r\n\r\n - `pos` - The top-left coordinate of the box.\r\n - `w` - The width of the box.\r\n - `h` - The height of the box.\r\n \r\nIt has the following methods:\r\n\r\n - `toPolygon()` - Returns a new Polygon whose edges are the edges of the box.\r\n\r\n### SAT.Response\r\n\r\nThis is the object representing the result of a collision between two objects.  It just has a simple `new Response()` constructor.\r\n\r\nIt has the following properties:\r\n\r\n - `a` - The first object in the collision.\r\n - `b` - The second object in the collison.\r\n - `overlap` - Magnitude of the overlap on the shortest colliding axis.\r\n - `overlapN` - The shortest colliding axis (unit-vector)\r\n - `overlapV` - The overlap vector (i.e. `overlapN.scale(overlap, overlap)`).  If this vector is subtracted from the position of `a`, `a` and `b` will no longer be colliding.\r\n - `aInB` - Whether the first object is completely inside the second.\r\n - `bInA` - Whether the second object is completely inside the first.\r\n \r\nIt has the following methods:\r\n\r\n- `clear()` - Clear the response so that it is ready to be reused for another collision test.\r\n\r\n \r\n<a name=\"tests\"></a>\r\nCollision Tests\r\n---------------\r\n\r\nSAT.js contains the following collision tests:\r\n\r\n### `SAT.testCircleCircle(a, b, response)`\r\n\r\nTests for a collision between two `Circle`s, `a`, and `b`.  If a response is to be calculated in the event of collision, pass in a cleared `Response` object.\r\n\r\nReturns `true` if the circles collide, `false` otherwise.\r\n\r\n### `SAT.testPolygonCircle(polygon, circle, response)`\r\n\r\nTests for a collision between a `Polygon` and a `Circle`.  If a response is to be calculated in the event of a collision, pass in a cleared `Response` object.\r\n\r\nReturns `true` if there is a collision, `false` otherwise.\r\n\r\n### `SAT.testCirclePolygon(circle, polygon, response)`\r\n\r\nThe same thing as `SAT.testPolygonCircle`, but in the other direction.\r\n\r\nReturns `true` if there is a collision, `false` otherwise.\r\n\r\n*NOTE: This is slightly slower than `SAT.testPolygonCircle` as it just calls that and reverses the result*\r\n\r\n### `SAT.testPolygonPolygon(a, b, response)`\r\n\r\nTests whether two polygons `a` and `b` collide. If a response is to be calculated in the event of collision, pass in a cleared `Response` object.\r\n\r\nReturns `true` if there is a collision, `false` otherwise.\r\n\r\n*NOTE: If you want to detect a collision between `Box`es, use the `toPolygon()` method*\r\n\r\n<a name=\"examples\"></a>\r\nExamples\r\n--------\r\n\r\nTest two circles\r\n\r\n    var V = SAT.Vector;\r\n    var C = SAT.Circle;\r\n    \r\n    var circle1 = new C(new V(0,0), 20);\r\n    var circle2 = new C(new V(30,0), 20);\r\n    var response = new SAT.Response();\r\n    var collided = SAT.testCircleCircle(circle1, circle2, response);\r\n    \r\n    // collided => true\r\n    // response.overlap => 10\r\n    // response.overlapV => (10, 0)\r\n    \r\nTest a circle and a polygon\r\n\r\n    var V = SAT.Vector;\r\n    var C = SAT.Circle;\r\n    var P = SAT.Polygon;\r\n    \r\n    var circle = new C(new V(50,50), 20);\r\n    // A square\r\n    var polygon = new P(new V(0,0), [\r\n      new V(0,0), new V(40,0), new V(40,40), new V(0,40)\r\n    ]);\r\n    var response = new SAT.Response();\r\n    var collided = SAT.testPolygonCircle(polygon, circle, response);\r\n    \r\n    // collided => true\r\n    // response.overlap ~> 5.86\r\n    // response.overlapV ~> (4.14, 4.14) - i.e. on a diagonal\r\n\r\nTest two polygons\r\n\r\n    var V = SAT.Vector;\r\n    var P = SAT.Polygon;\r\n    \r\n    // A square\r\n    var polygon1 = new P(new V(0,0), [\r\n      new V(0,0), new V(40,0), new V(40,40), new V(0,40)\r\n    ]);\r\n    // A triangle\r\n    var polygon2 = new P(new V(30,0), [\r\n      new V(0,0), new V(30, 0), new V(0, 30)\r\n    ]);\r\n    var response = new SAT.Response();\r\n    var collided = SAT.testPolygonPolygon(polygon1, polygon2, response);\r\n    \r\n    // collided => true\r\n    // response.overlap => 10\r\n    // response.overlapV => (10, 0)\r\n    \r\nNo collision between two Boxes\r\n\r\n    var B = SAT.Box;\r\n    \r\n    var box1 = new B(new V(0,0), 20, 20).toPolygon();\r\n    var box2 = new B(new V(100,100), 20, 20).toPolygon();\r\n    var collided = SAT.testPolygonPolygon(box1, box2);\r\n    \r\n    // collided => false\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}